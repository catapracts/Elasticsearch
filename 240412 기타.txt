use* : hook
*Context : React에서 제공하는 기능인데, prop없이 하위 component에서 발생하는 state와 event를 처리할 수 있게 해주는 역할
Bearer = 기본 문법

context(중규모), reducer(대규모, 기업용), mobx - 상태값 관리

state의 변경이나 event 발생 자체가 하위 component 즉 client의 요청이고 이때 요청시, 값이 변동되거나 다른 event가 발생하면, 
변경된 부분을 가지고 상위로 올라가서 상위에서 여러 처리를 거친 후 맨 먼저 호출한 곳에 값을 반환한다.


CORS
- API통신할 때, 반드시 설정해야 한다.
- 각 Browser마다 존재(Browser 보안 정책)
- Request, Response port, protocol, host이름 등 하나라도 다르면 Browser가 차단
- 개발 port랑 service port가 서로 다르다.

CSRF
- Spring Security 적용시 까다로운 문제로 대두된다.
- Server에서 보안key를 받고 통신한다.
- 개발 중에는 꺼놓다가, 개발 후 켜서 설정

CORS + CSRF 이 2개 setting 먼저 하고 가야한다. / 개발 중간에는 잠시 꺼뒀다가, 개발 후에 설정



JWT(JSON Web Token) 
- Token기반 인증 / Cloud HDD에 JSON Token으로 생성 / MSA - MicroService에서 사용 / Client HDD에 인증 정보를 저장
Client
SPA


JWT
Local storage = Browser의 storage공간 / 값 넣고 창 닫아도 안 날아감 - 따로 삭제 처리해야함
Session storage = Browser의 storage공간 / 값 넣고 창 닫으면 다 날아감
클라이언트 브라우저 공간


Cookie - Client HDD에 인증 정보를 저장 / 삭제 안 하면 그대로 있음 / 브라우저마다 다른 경로에 존재 / 클라이언트 하드
서드 파티 쿠키 - 브라우저를 제외한 다른 프로그램이나 기타 경로로 만들어진 쿠키

Session - Server memory에 사용자 정보 저장 -> user 늘어날수록 과부하 / 서버에서 사용자를 식별하기 위해 브라우저에서 고유번호 또는 아이디 할당되는데 그게 바로 세션 / 서버 램

Session - user login정보(인증 정보)를 server에 담는다. -> user들 login 중가하면, Server memory 가득 찬다.
Cookie - user login정보(인증 정보)를 client의 HDD(Client System)에 담는다.(제거 안 하면 그대로 있음) -> 만료날짜 지정해서 자동삭제, 보안 문제 존재
JWT - user login정보(인증 정보)를 client의 Browser storage에 담는다. -> Token으로 access 허용, 차단

Token - 처음 생성 : 짧게, Refresh Token : 길게

Authentication : 로그인(Authen - 로그인과 같이 사용자 또는 프로세스의 신원을 확인하는 프로세스)
Authorization : 권한(Autho - 누가 무엇을 할 수 있는지 결정하는 규칙)


========================================================================================================================================================================
React-SpringBoot_RESTAPI - DevTool이랑 lombok 없는 상태

http://localhost:3000/swagger-ui/index.html

@Api(tags = {"설명"}) -> class위에
@ApiOperation(value="설명") -> method위에



Client(localhost:8090) : React(8090) : Spring(3000)

CORS 설정 안 하면 다른 API요청 시 error 뜰 수 있다.
현재는 gradle쓰는 추세
pyload = Server -> Client Value
Spring : 3000
MyBatis - @Mapper이용해서 SQL Query연결

*.xml - 실제 sql query를 mapping한 것
Member.xml - 회원가입 & 로그인 관련 SQL Query / pw를 암호화 해서 저장한다.
Comment.xml - 댓글 관련 SQL Query
Bbs.xml - 게시판 관련 SQL Query


Maven -> Gradle, Gradle -> Maven 서로 변환할 줄 알아야 한다.
Gradle(Kotlin) : mobile용

src/main/resources/sqls/*.xml


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
DB
del 
- 삭제 여부를 0/1로 구분
- 0 되면 DB에 그대로 있고 FE에서도 그대로 존재 = 모든 사람들이 볼 수 있다.
- 1 되면 DB에 그대로 있고 FE에서는 존재 X = DB관리자만 볼 수 있다.

ref, step, depth
- 이 3개 column으로 게시글인지 답글인지 구분한다.
- ref : x번째 글을 표시
- step : x번째 페이지를 의미
- depth : 답글인지 아닌지 표시 - 이때, ref값도 해당 글의 번호와 똑같게 됨 (ex) 2번째 글의 답긍을 만들면 2번째 글과 답글의 ref = 2로 똑같이 설정된다. -> DB에서 확인 가능
select * from bbs order by ref desc;
현재 프로젝트에서는 ref - desc / step - asc / seq - desc순서로 설정되어 있음(Bbs.xml파일에서 확인 가능)
select count(*) from comment where bbs_seq=2; -> record의 개수 계산 -> pageCnt(CommentList.js)



\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
SpringBoot


File - Import - Maven - Existing Maven Projects - pom.xml 선택하고 finish

https://mvnrepository.com/ -> 여기서 라이브러리 찾고 넣기 가능 / 버전별 호환성도 제공함
<dependencies>이 안에 넣기</dependencies>


jwt package
Token관련 정보 정리 - 암호화 방식, 유효 기간, Token 길이 등
application.properties -> jwt.secret=jwtsecretkey 추가한다 -> JwtTokenUtil.java - ${jwt.secret}라는 값을 이용해서 암호화 진행


Login.js / Logout.js / Join.js 
-> member.dto.request.LoginRequest.java/JoinRequest.java + member.controller.MemberController.java + jwt package(JWT Token인증)
-> member.dto.request.LoginResponse.java/JoinResponse.java + member.controller.MemberController.java +(->) member.service.MemberService.java
-> member.dto.request.LoginResponse.java/JoinResponse.java + member.controller.MemberController.java -> Login.js / Logout.js / Join.js
로그인과 화원가입 관련해서는 이 과정을 거친다. -> 성공하고 나면 Bbs(게시판)으로 간다.
없는 아이디 입력, 비밀번호 잘 못 입력, 아이디 잘 못 입력 등 오류 발생 시 -> member.exception.MemberException.java가 추가 실행된다.

========================================================================================================================================================================

@RestController = Responsebody + Controller = JSON으로 통신하겠다.

	private final MemberService service;

	public MemberController(MemberService service) {
		this.service = service;
	} => 이런식으로 써서 객체 활성화 시킬 수 있다.
JoinRequest -> MemberDTO안에 존재 / Client에 넣을 값들


- member.controller.MemberController.java
@GetMapping
public ResponseEntity<?> checkIdDuplicate(@RequestParam String id)
{
System.out.println("UserController checkIdDuplicate " + new Date());
HttpStatus status = service.checkIdDuplicate(id);
return new ResponseEntity<>(status);
} -> id 중복 체크


@PostMapping("/join")
public ResponseEntity<JoinResponse> join(@Valid @RequestBody JoinRequest req) -> 값(req객체(join.js)) 들어온다.
{
System.out.println("UserController join " + new Date());
return ResponseEntity.ok(service.join(req));
} -> 회원가입 성공 시 return(Service의 join method)




- member.service.MemberService.java
public HttpStatus checkIdDuplicate(String id) 
{
isExistUserId(id);
return HttpStatus.OK;
} ->  id 중복 체크


private void isExistUserId(String id) 
{
Integer result = dao.isExistUserId(id);
if (result == 1) 
{
throw new MemberException("이미 사용중인 아이디입니다.", HttpStatus.BAD_REQUEST);
}
} ->  id 중복 체크


@Transactional
public JoinResponse join(JoinRequest req)
{
saveMember(req);
authenticate(req.getId(), req.getPwd());
return new JoinResponse(req.getId());
} -> 회원가입 작동


private void saveMember(JoinRequest req) 
{
// 아이디 중복 확인
isExistUserId(req.getId());
// 패스워드 일치 확인
checkPwd(req.getPwd(), req.getCheckPwd());
// 회원 정보 생성
String encodedPwd = encoder.encode(req.getPwd());
CreateMemberParam param = new CreateMemberParam(req, encodedPwd);
Integer result = dao.createMember(param);
if (result == 0) {
throw new MemberException("회원 등록을 실패했습니다.", HttpStatus.INTERNAL_SERVER_ERROR);
}
}


private void authenticate(String id, String pwd) 
{
try
{
authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(id, pwd));
}
catch (DisabledException e) 
{
throw new MemberException("인증되지 않은 아이디입니다.", HttpStatus.BAD_REQUEST);
}
catch (BadCredentialsException e)
{
throw new MemberException("비밀번호가 일치하지 않습니다.", HttpStatus.BAD_REQUEST);
}
}



member.dao.MemberDao.java
@Mapper -> Member.xml을 동작시켜주는 역할
@Repository
member.dto.param.CreateMemberParam.java의 field를 사용



========================================================================================================================================================================

Security


- security.WebSecurityConfig.java - CORS, CSRF 등 보안정책 설정

.csrf().disable() -> 개발 당시에는 disable로 설정하고, 개발 완료 후 enable로 바꾼 뒤, key값 넣어야 작동한다.
.cors()     
.and()
.authorizeRequests()
.antMatchers(HttpMethod.POST, "/bbs", "/comment").authenticated() -> Token확인 후 인증 처리
.antMatchers(HttpMethod.PATCH, "/bbs", "/comment").authenticated() -> Token확인 후 인증 처리
.antMatchers(HttpMethod.DELETE, "/bbs", "/comment").authenticated() -> Token확인 후 인증 처리


@Bean
CorsConfigurationSource corsConfigurationSource() -> CORS구성 정의
{
CorsConfiguration configuration = new CorsConfiguration();
configuration.setAllowedOrigins(List.of("http://localhost:8090")); -> CORS 적용할 주소
configuration.setAllowedMethods(Arrays.asList("GET","POST", "OPTIONS", "PATCH", "DELETE")); -> CORS 허용할 REQUEST
configuration.setAllowedHeaders(Arrays.asList("Content-Type", "Authorization"));
UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
source.registerCorsConfiguration("/**", configuration);
return source;
}


========================================================================================================================================================================
DTO


- dto.request.JoinRequest
member.dto.param,CreateMemberParam.java -> React에서 가져온 값을 DB에 저장하기 위해 만든 DTO
member.dao.MemberDao.java -> Repository, @Mapper적용된 상태 - Member.xml에 미리 만든 SQL문 사용한다. = MyBatis형식



========================================================================================================================================================================


- config.WebCoinfig.java
CORS Settings




- config.DatabaseConfig.java
MyBatis랑 DB연결한 설정 들어가 있다. - 실제 DB와 연결

@Configuration
@PropertySource("classpath:application.properties") -> application.properties에서 불러와서 DB와 연결(Mapping)
@ConfigurationProperties(prefix = "spring.datasource.hikari") -> application.properties에서

@Bean
public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception -> 연결할 SQL Query가 어디 있는지 Mapping 
{
logger.info("DatabaseConfig sqlSessionFactory(): {}", new Date());
SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean();
sqlSessionFactoryBean.setDataSource(dataSource);
Resource[] resources = new PathMatchingResourcePatternResolver().getResources("classpath:sqls/*.xml");
sqlSessionFactoryBean.setMapperLocations(resources);
sqlSessionFactoryBean.getObject().getConfiguration().setMapUnderscoreToCamelCase(true);
return (SqlSessionFactory) sqlSessionFactoryBean.getObject();
} -> SQL Query문을 ~.xml에서 가져온다.

src/main/resources/sqls/~.xml여러개 있고 여기에서 SQL Query문 직접 작성한 다음 가져온다.


========================================================================================================================================================================


bbs.*패키지들 - 게시판 관련 Domain

- bbs.controller.BbsController.java
생성자 주입 DI과정 생략도 가능함


- bbs.dto.request.CreateBbsRequest.java
React에서 data 넘어올 때 주고 받을 형식


- bbs.dto.param.CreateBpsParam.java


- bbs.dao.BbsDao.java
@Mapper - ~.xml과 맵핑

- bbs.service.BbsService.java
dao.createBbs(param); - 매핑된 값을 이용해서 생성





\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
React

React : 8090 port이용해서 open한 다음 3000 port이용해서 작동한다.
npm install 1번 치니까 오류나는데  2번 치니까 왜 되는거지?

JWT로 DB에 token base인증 진행 / REST로 통신 axios이용 /

REST API - 항상 2개가 동작함(테스트(OPTIONS - Request Method 사용), 실행(GET, POST, PUT, DELETE etc...))


F12

Console tab

Network tab

Application tab 
- Local Storage : JWT 저장
- Session Storage

Token = 3Block = Header ++ Payload + Verify Signature
{
  "sub": "admin", -> Token 소유자
  "exp": 1712834188, -> 유효기간 만료일
  "iat": 1712816188 -> 유효기간 시작일
}



========================================================================================================================================================================
member



Join.js 
- 회원가입
const changeId = (event) => 
{
setId(event.target.value);
} => React Form의 기본 setting

- const req = {
id: id,
name, name,
pwd: pwd,
checkPwd: checkPwd,
email: email
} = req객체 / 안에 있는 값들은 전부 state / DTO랑 연동되어 사용
await axios.post("http://localhost:3000/user/join", req) 
- then(success - 200 / resp) : navigate로 페이지 이동 
- catch(fail - exceptions / err) : alert띄워서 오류 메시지 출력




Login.js

const { auth, setAuth } = useContext(AuthContext); -> setAuth로 state를 받으면 AuthContext에 전달하고, 전달 받은 값을 다시 auth로
const { headers, setHeaders } = useContext(HttpHeadersContext); -> setHeader로 전달
const navigate = useNavigate(); -> navigate를 이용해


const login = async () =>
{
const req = 
{
id: id,
pwd: pwd
} -> 로그인한 id와 pw를

await axios.post("http://localhost:3000/user/login", req) -> Server에 던져준다.

.then((resp) => { -> Server에서 확인 후정보 일치하면, Token생성

// JWT 토큰 저장
localStorage.setItem("bbs_access_token", resp.data.jwt);
localStorage.setItem("id", resp.data.id);

setAuth(resp.data.id); // 사용자 인증 정보(아이디 저장) by setter
setHeaders({"Authorization": `Bearer ${resp.data.jwt}`}); // 헤더 Authorization 필드 저장 by setter

.catch((err) => { -> 일치 안 하면, alert창 띄운다.




Server로부터 받아온 값(JWT, req객체(id, pw)) -> setAuth에 들어가고 AuthContext에 들어가서, auth로 이동하고




Logout.js
로그아웃 = Null값으로 바꿔서 처리 = Token값이랑 ID지운다.
localStorage.removeItem("bbs_access_token");
localStorage.removeItem("id");



========================================================================================================================================================================


App.js
- AuthProvider - 하위 component에게 state(context, reducer, mobx etc...) 내려보내 주는 역할
모든 component들이 작동
<AuthProvider> : state 전달1 -> AuthProvider.js = 로그인한 사용자의 정보 ID, PW
<HttpHeadersProvider> : state 전달2 -> HttpHeadersProvider.js = 로그인한 사용자의 Token 정보
<BrowserRouter>로 묶은 상태


========================================================================================================================================================================
context폴더


AuthProvider.js
(localStorage.getItem("id")); -> browser의 HDD(Local Storage)에 JSON Token정보(인증시 사용)를 state(=auth, setAuth)에 저장 - localhost:8090
<AuthContext.Provider value = {value}> -> value = user의 id값
const [auth, setAuth] = useState(localStorage.getItem("id")); -> Login에서 
const value = {auth, setAuth };

로그인한 사용자의 정보 ID, PW



HttpHeadersProvider.js
"Authorization":`Bearer ${localStorage.getItem("bbs_access_token")}` 
-> Local Storage에 bbs token을 저장하고 이걸 state에 넣어서 data 이동 / Token값(현재 로그인한 사용자) 들어오면 Bearer이용해서 Header생성 / 이렇게 생성한 걸로 Server한테 특정 행동(CRUD) 요청

로그인한 사용자의 Token 정보


========================================================================================================================================================================
app폴더 - page처리 component
Header
Nav - 링크
Main - 링크 클릭하면 여기에서 변화
Footer

public/index.html -> 모든 page들이 rendering되는 곳
bootstrap넣은 상태 -> 호출해서 사용하면 된다.





Nav.js 
import { AuthContext } from "../context/AuthProvider"; -> 로그인 등 회원관련 동작 시 정보 받아온다.
- const { auth, setAuth } = useContext(AuthContext); -> AuthContext(사용자 로그인 정보)이용해서 동작 / Home.js 작동

(auth) ? -> auth에 값이 있는지 확인(3항 연산자)
<> -> auth에 값이 존재할 경우 작동
{/* 회원 정보 */}
<li className="nav-item">
<span className="nav-link"> {auth} 님 반갑습니다 <i className="fab fa-ello"></i> &nbsp; </span>
</li>
{/* 로그아웃 */}
<li className="nav-item">
<Link className="nav-link" to="/logout"><i className="fas fa-sign-out-alt"></i> 로그아웃</Link>
</li>
</>
:
<> -> auth에 값이 존재하지 않을 경우 작동
{/* 로그인 */}
<li className="nav-item">
<Link className="nav-link" to="/login">로그인</Link>
</li>
{/* 회원가입 */}
<li className="nav-item">
<Link className="nav-link" to="/join">회원가입</Link>
</li>
</> -> 그에 따라 동작 변화



Login.js -> AuthProvider.js -> Nav.js -> AuthProvider.js -> LogOut.js

========================================================================================================================================================================
Router.js

<Route path="/bbsdetail/:seq" element={<BbsDetail />}></Route> -> seq(서버에서 받아오는 값) 이용해서 상세페이지 열기


========================================================================================================================================================================

Controller.js



========================================================================================================================================================================
bbs - 게시판 관련
댓글, 답글이 존재
자기 자신 아니면 글 수정 불가능 / 글에 대한 댓글, 답글은 로그인한 사용자만 작성 가능


BbsWrite.js -> 게시판 글 작성 / Bearer이용해서 글쓰기 권한도 가지고 있는지 확인하고 작성 가능하게 함(headers - Token 확인)
const { auth, setAuth } = useContext(AuthContext) -> 인증 정보 가져오기
const { headers, setHeaders } = useContext(HttpHeadersContext); -> Header의 정보(Bearer로 가져온 Token정보 = bbs, comment, authenticated) 가져오기
const navigate = useNavigate();
const [title, setTitle] = useState("");
const [content, setContent] = useState("");







작성 완료 버튼 누르면 createBbs method 호출
useEffect(() => { -> 인증 정보 없는 경우 작성 불가능
if (!auth) {

req 객체 이용해서 data 전달 by axios
const req = 
{
id: localStorage.getItem("id"), -> Browser의 LocalStorage에 저장된 id column의 값을 가져온다.
title: title, 
content: content
}

await axios.post("http://localhost:3000/bbs", req, {headers: headers}) -> 헤더 이동할 때, Token값 가지고 가야한다.(Login했을 때, token값 가지고 와서 Header의 Authorization field에 넣었기 때문)

Create method 실행시켜서 F12누르고 Network tab Headers보면 Authorization이 Bearer 공백 token값 이렇게 나온다.
다 실행되고 난 뒤, 게시판 상세페이지로 넘어가도록 설정된 상태







BbsUpdate.js



BbsList.js
SpringBoot에서 만든 method들을 useEffect를 이용해서 사용한다.
choiceVal(제목, 글쓴이 등 선택), searchVal 2개 value이용 - 게시글 검색해서 찾기



BbsComment.js -> 댓글 





BbsDetail.js -> 상세페이지 / bbs의 각 type 지정
const [bbs, setBbs] = useState({}); -> 빈 객체 선언한 뒤
const { seq } = useParams(); // 파라미터 가져와서 빈 객체에 넣기 그리고 처리 시작 by SQL Query
await axios.get(`http://localhost:3000/bbs/${seq}`, {params: {readerId: auth ? auth : ""}}) -> 인증 된 사용자인가? 판단 후 readerId에 auth값 넣기 or auth에 빈값 넣기

/* 자신이 작성한 게시글인 경우에만 수정 삭제 가능 */
(localStorage.getItem("id") == bbs.id) ?
<>
<Link className="btn btn-outline-secondary"  to="/bbsupdate" state={{ bbs: updateBbs }}><i className="fas fa-edit"></i> 수정</Link> &nbsp;
<button className="btn btn-outline-danger"  onClick={deleteBbs}><i className="fas fa-trash-alt"></i> 삭제</button>
</>
:

{/* 댓글 작성 컴포넌트 */}
{
(auth) ? // 로그인한 사용자만 댓글 작성 가능
<CommentWrite seq={seq}/>
:
null
}
{/* 댓글 리스트 컴포넌트 */}
<CommentList  seq={seq}/> -> CommentList.js



PageCnt


========================================================================================================================================================================

CommentList.js
- props 이용해서 seq 객체 전달
useEffect(() => {
getCommentList(1);
}, []);

await axios.get(`http://localhost:3000/comment`, { params: { "bbsSeq": seq, "page": page } }) -> 몇 번째 page의 어떤 댓글인가?


const [commentList, setCommentList] = useState([]); ->Server로부터 받은 값들 처리 / 배열안의 객체들


Pagination Library이용해서 페이지 처리 - react-js-pagination에 존재
<Pagination -> props의 값만 전달해주면 된다. / 직접 구현도 가능하긴하다.
activePage={page} -> record의 개수
itemsCountPerPage={5} -> 1 페이지당 n개 출력 
totalItemsCount={totalCnt} -> record의 개수
pageRangeDisplayed={5} -> < 1, 2, 3, 4, 5 > / 페이징 처리 출력 부분
prevPageText={"‹"}
nextPageText={"›"}
onChange={changePage} /> -> page event


{ -> 페이지 출력
commentList.map(function (comment, idx) { -> List에 객체를 담아서 전달하는데 map함수 이용해서 객체들 확인
return (
<div className="my-5" key={idx}> -> key값을 잡아줘야 오류 안 뜬다.
<Comment obj={comment} key={idx} /> -> key값을 잡아줘야 오류 안 뜬다.
</div>
);
})
}


setTotalCnt(resp.data.pageCnt); -> Server에서 return받아 온 답변의 전체 갯수 -> 이걸 setTotalCnt로 전달

CommentWrite.js


Comment.js -> 댓글 출력

const comment = props.obj; -> prop안에 있는 객체 사용해서 comment에 넣기 - 댓글 자체가 하나의 객체다보니까 저렇게 사용하는 것도 가능
const [show, setShow] = useState(false); -> default값이 false = 기본적으로 안 보여준다는 것



if (resp.data.deletedRecordCount == 1) -> 댓글 삭제 시
{
alert("답글을 성공적으로 삭제했습니다 :D");
navigate(0); -> 삭제 후 페이지 이동 / 0 = 현재 페이지, 1 = 다음 페이지, -1 = 이전 페이지
}

BbsDetail.js로 넘어간다









function updateToggle() - - 댓글 수정 버튼 누르면 수정하는 창 나온다. 버튼 누리기 전까지는 안 나오게 설정
{ 
setShow(show => !show) 
}

if (comment.del == 0) { -> 삭제 안 된 댓글에 대한 처리


else { -> 삭제 된 댓글에 대한 처리